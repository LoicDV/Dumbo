programme: txt | txt programme | dumbo_bloc | dumbo_bloc programme

txt: (/[^{]/)+

dumbo_bloc: ( "{{" expression_list "}}" ) | ( "{{" "}}" )

expression_list: expression ";" expression_list | expression ";"

expression: add_expr
            | sub_expr 
            | mul_expr 
            | div_expr 
            | print_expr 
            | for_expr 
            | assign_expr_var
            | assign_expr_arith
            | if_expr

add_expr: (INT "+" INT)
sub_expr: (INT "-" INT)
mul_expr: (INT "*" INT)
div_expr: (INT "/" ("1".."9")+)
inf_expr: (add_int "<" add_int)
sup_expr: (add_int ">" add_int)
eq_expr: (add_int "==" add_int)
dif_expr: (add_int "!=" add_int)

add_int : mul_int (ADD_OPERATION mul_int)*
ADD_OPERATION : "+" | "-" 
mul_int : INT (MUL_OPERATION INT)*
MUL_OPERATION : "*" | "/"

bool_expr: BOOLEAN | inf_expr | sup_expr | eq_expr | dif_expr | (bool_expr OPERATOR bool_expr)

if_expr: ( "if" bool_expr "do" expression_list "endif" )

for_expr: ( "for" VARIABLE "in" (string_list | VARIABLE) "do" expression_list "endfor" )

print_expr: ("print" string_expression)

assign_expr_arith: ( VARIABLE ":=" (add_expr | sub_expr | mul_expr | div_expr) )
assign_expr_var: ( VARIABLE ":=" (string_expression | string_list | INT) )

string_expression: STRING | VARIABLE | string_expression "." string_expression
string_list: "(" string_list_interior ")"
string_list_interior: ( STRING ("," STRING)* )

VARIABLE: CNAME
BOOLEAN: "true" | "false"
OPERATOR: "or" | "and"
STRING: ( "'" (/[^']/)* "'" )

%import common.INT
%import common.FLOAT
%import common.NUMBER
%import common.WORD
%import common.CNAME
%ignore /[ \n\t]/
import unittest
from dumbo import *

class DumboTester(unittest.TestCase):
    
    def testPrintSimple(self):
        # Print string.
        tree = langage.parse("{{ print 'sol'; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "sol")
        # Print variable string.
        tree = langage.parse("{{ a := 'sol'; print a; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "sol")
        # Print int.
        tree = langage.parse("{{ print 4; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "4")
        # Print variable int.
        tree = langage.parse("{{ a := 4; print a; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "4")
        # Print concaténation.
        tree = langage.parse("{{ print 'cou'.'cou'; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "coucou")
        # Print variable concaténation.
        tree = langage.parse("{{ a := 'cou'.'cou'; print a; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "coucou")
    
    def testDumboBlock(self):
        # 1 dumbo_block.
        tree = langage.parse("{{ print 1; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1")
        # 2 dumbo_block.
        tree = langage.parse("{{ print 1; }}{{ print 1; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "11")
        # Transfert de donnée.
        tree = langage.parse("{{ sol := 'yes'; }}{{ print sol; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # Vide.
        tree = langage.parse("{{}}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
    
    def testTxt(self):
        # 1 txt.
        tree = langage.parse("print 1;")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "print 1;")
    
    def testDumboBlocAndTxt(self):
        # dumbo_bloc et txt.
        tree = langage.parse("{{ print 1; }}2")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "12")
        tree = langage.parse("1{{ print 2; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "12")
        tree = langage.parse("1{{ print 2; }}3")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "123")
        tree = langage.parse("{{ print 1; }}2{{ print 3; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "123")
        # Espace
        tree = langage.parse("{{ print 1; }} 2")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1 2")
        tree = langage.parse("1 {{ print 2; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1 2")
    def testAssignVar(self):
        # Bonne assignation.
        tree = langage.parse("{{ test := 'a'; test2 := 'b'; print test; print test2; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "ab")
        # Variable ecrasée.
        tree = langage.parse("{{ test := 'a'; test := 'b'; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "b")
        # Boolean true.
        tree = langage.parse("{{ test := true; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "true")
        # Boolean false.
        tree = langage.parse("{{ test := false; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "false")
        # string_list.
        tree = langage.parse("{{ test := ('1'); }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ test := ('1', 't', 'u'); }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # string_expression.
        # Concaténation.
        tree = langage.parse("{{ test := 'test'.'de'.'test'; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "testdetest")
        # String.
        tree = langage.parse("{{ test := 'test'; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "test")
        # Variable.
        tree = langage.parse("{{ test := 'test'; sol := test; print sol; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "test")
        tree = langage.parse("{{ test := 'test'; sol := test; res := sol; print res; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "test")
        # Variable entiere avec opération */.
        tree = langage.parse("{{ a := 2; test := a * a; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "4")
        tree = langage.parse("{{ test := 2; test := test * 3; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "6")
        tree = langage.parse("{{ test := 2; test := test * test; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "4")
        # INT avec opération */.
        tree = langage.parse("{{ test := 1 * 2; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "2")
        tree = langage.parse("{{ a := 2; test := 1 * a; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "2")
        tree = langage.parse("{{ test := 2 / 2; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1")
        tree = langage.parse("{{ a := 2; test := 2 / a; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1")

    def testAssignArith(self):
        # Bonne assignation.
        tree = langage.parse("{{ test := 1; test2 := 2; print test; print test2; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "12")
        # Variable ecrasée.
        tree = langage.parse("{{ test := 1; test := 0; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "0")
        # add_expr.
        tree = langage.parse("{{ test := 1 + 1; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "2")
        tree = langage.parse("{{ test := 1 + 1 + 1; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "3")
        tree = langage.parse("{{ test := 1 * 1 + 1; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "2")
        tree = langage.parse("{{ test := 1 + 1 * 1; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "2")
        # add_exp avec variable.
        tree = langage.parse("{{ i := 1; test := i + 1; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "2")
        tree = langage.parse("{{ i := 1; test := i + 1 + 1; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "3")
        tree = langage.parse("{{ i := 1; test := 1 + i + 1; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "3")
        tree = langage.parse("{{ i := 1; test := i + 1 + i; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "3")

    def testIfRéussi(self):
        # If réussi avec boolean.
        tree = langage.parse("{{ if true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec variables.
        tree = langage.parse("{{ a := true; if a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec And et boolean.
        tree = langage.parse("{{ if true and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec And et boolean et variable.
        tree = langage.parse("{{ a := true; if a and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec Or et 2 boolean true.
        tree = langage.parse("{{ if true or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec Or et 2 boolean true avec variable.
        tree = langage.parse("{{ a := true; if a or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec Or et boolean true et false.
        tree = langage.parse("{{ if true or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec Or et boolean true et false avec variable.
        tree = langage.parse("{{ a := true; if a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if true or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 2 And et boolean.
        tree = langage.parse("{{ if true and true and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 2 And et boolean avec variable.
        tree = langage.parse("{{ a := true; if a and true and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a and true and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := true; if a and b and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 2 Or et boolean true.
        tree = langage.parse("{{ if true or true or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 2 Or et 2 boolean variable.
        tree = langage.parse("{{ a := true; if a or true or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a or true or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a or true or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 2 Or et boolean true et false.
        tree = langage.parse("{{ if false or false or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 1 And, 1 Or et boolean true.
        tree = langage.parse("{{ if true and true or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 1 And, 1 Or et boolean true avec variable.
        tree = langage.parse("{{ a := true; if a and true or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a and true or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 1 And, 1 Or et boolean true et false.
        tree = langage.parse("{{ if true and true or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if true and false or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 1 And, 1 Or et boolean true et false avec variable.
        tree = langage.parse("{{ a := true; if a and true or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a and a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if true and a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec <.
        tree = langage.parse("{{ if 1 < 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec < avec variable.
        tree = langage.parse("{{ a := 1; if a < 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec < et calcul.
        tree = langage.parse("{{ if 0 + 1 < 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 0 + 1 < 4 / 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 0 + 1 * 0 < 4 / 2 + 1 * 6 - 4 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec < et calcul et variable.
        tree = langage.parse("{{ a := 0 + 1; if a < 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1; if a < 4 / 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec >.
        tree = langage.parse("{{ if 2 > 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec > avec variable.
        tree = langage.parse("{{ a := 2; if a > 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec > et calcul.
        tree = langage.parse("{{ if 2 > 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 4 / 2 > 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 4 / 2 + 1 * 6 - 4 > 0 + 1 * 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec > et calcul et variable.
        tree = langage.parse("{{ a := 2; if a > 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 4 / 2; if a > 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 4 / 2 + 1 * 6 - 4; if a > 0 + 1 * 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec ==.
        tree = langage.parse("{{ if 1 == 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec == avec variable.
        tree = langage.parse("{{ a := 1; if a == 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec == avec calcul.
        tree = langage.parse("{{ if 0 + 1 == 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 0 + 1 == 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 0 + 1 * 0 + 0 == 1 * 0 + 1 - 1 * 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec == avec calcul avec variable.
        tree = langage.parse("{{ a := 0 + 1; if a == 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1; if a == 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec !=.
        tree = langage.parse("{{ if 0 != 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec != avec variable.
        tree = langage.parse("{{ a := 0; if a != 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec != avec calcul.
        tree = langage.parse("{{ if 0 + 0 != 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 0 + 1 != 0 + 3 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec != avec calcul avec variable.
        tree = langage.parse("{{ a := 0 + 0; if a != 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1; if a != 0 + 3 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
    
    def testIfRaté(self):
        # If raté avec boolean.
        tree = langage.parse("{{ if false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec boolean avec variable.
        tree = langage.parse("{{ a := false; if a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec And et boolean true et false.
        tree = langage.parse("{{ if true and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec And et boolean true et false avec variable.
        tree = langage.parse("{{ a := true; if a and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec Or et 2 boolean true et false.
        tree = langage.parse("{{ if false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec Or et 2 boolean true et false avec variable.
        tree = langage.parse("{{ a := false; if a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec Or et 2 boolean.
        tree = langage.parse("{{ if false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec Or et 2 boolean avec variable.
        tree = langage.parse("{{ a := false; if a or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if false or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if a or b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec 2 And et boolean true et false.
        tree = langage.parse("{{ if false and true and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if true and false and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if true and true and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if false and false and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec 2 And et boolean true et false avec variable.
        tree = langage.parse("{{ a := true; if false and a and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; if false and true and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; if false and a and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; b := true; c := false; if c and a and b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec 2 Or et boolean.
        tree = langage.parse("{{ if false or false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec 2 Or et boolean avec variable.
        tree = langage.parse("{{ a := false; if a or false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if false or a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec 1 And, 1 Or et boolean true.
        tree = langage.parse("{{ if true and false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if false and false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if false and true or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec 1 And, 1 Or et boolean true avec variable.
        tree = langage.parse("{{ a := true; if a and false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; b := false; if a and b or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; b := false; if a and false or b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec <.
        tree = langage.parse("{{ if 2 < 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec < avec variable.
        tree = langage.parse("{{ a := 2; if a < 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec < et calcul.
        tree = langage.parse("{{ if 2 + 1 < 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if 0 + 1 < 2 / 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if 4 / 2 + 1 * 6 - 4 < 0 + 1 * 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec < et calcul avec variable.
        tree = langage.parse("{{ a := 2 + 1; if a < 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1; if a < 2 / 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 4 / 2 + 1 * 6 - 4; if a < 0 + 1 * 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec >.
        tree = langage.parse("{{ if 2 > 3 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec > avec variable.
        tree = langage.parse("{{ a := 2; if a > 3 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec > et calcul.
        tree = langage.parse("{{ if 2 > 0 + 1 * 2  do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if 4 / 2 - 2 > 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if 0 + 1 * 0 > 4 / 2 + 1 * 6 - 4 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec > et calcul avec variable.
        tree = langage.parse("{{ a := 2; if a > 0 + 1 * 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 4 / 2 - 2; if a > 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec ==.
        tree = langage.parse("{{ if 2 == 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec == avec variable.
        tree = langage.parse("{{ a := 2; if a == 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ b := 1; if 2 == b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec == avec calcul.
        tree = langage.parse("{{ if 0 + 1 == 3 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec == avec calcul avec variable.
        tree = langage.parse("{{ a := 0 + 1 ; if a == 3 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1; if a == 0 + 1 * 2 do print 'yes'; endif; }}")
        scope = Scope()
        # If raté avec !=.
        tree = langage.parse("{{ if 0 != 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec != avec variable.
        tree = langage.parse("{{ a := 0; if a != 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0; if 0 != a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")

    def testFor(self):
        # string list.
        tree = langage.parse("{{ for elem in ('1', '2', '3') do print elem; endfor; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "123")
        # variable.
        tree = langage.parse("{{ a := ('1', '2', '3'); for elem in a do print elem; endfor; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "123")
        # if dans le for.
        tree = langage.parse("{{ a := ('1', '2', '3'); for elem in a do if elem == 2 do print '2 ok'; endif; endfor; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "2 ok")
        tree = langage.parse("{{ a := ('1', '2', '3'); for elem in a do if elem == 4 do print '2 ok'; endif; endfor; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # for dans le if.
        tree = langage.parse("{{ a := ('1', '2', '3'); if true do for elem in a do if elem == 2 do print '2 ok'; endif; endfor; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "2 ok")
        tree = langage.parse("{{ a := ('1', '2', '3'); if false do for elem in a do if elem == 2 do print '2 ok'; endif; endfor; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # Check de variables.
        tree = langage.parse("{{ elem := 4; a := ('1', '2', '3'); for elem in a do print elem; endfor; print elem; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1234")

    
    def testTemplate(self):
        tree = langage.parse("{{ label := 'realises par Tony Kaye'; liste_label := ('American History X', 'Snowblind', 'Lake of Fire'); }}<html><head><title>Films {{ print label; }}</title></head><body><h1><b>Films {{ print label; }}</b></h1>{{ for nom_film in liste_label do print nom_film; print '<br />'; endfor; }}</body></html>")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "<html><head><title>Films realises par Tony Kaye</title></head><body><h1><b>Films realises par Tony Kaye</b></h1>American History X<br />Snowblind<br />Lake of Fire<br /></body></html>")
        tree = langage.parse("{{nom := 'Mes plus belles vacances'; listephoto := ('Mon beau bateau.png', 'Belle maman.png', 'Apero.png', 'Coucher de soleil.png');}}<html><head><title>{{ print nom; }}</title></head><body><h1>{{ print nom; }}</h1>{{i := 0; for nom in listephoto do print '<a href =\"'.nom.'\">'.nom.'</a>'; i := i + 1; endfor;}}<br />Il y a {{ print i; }} photos dans l album \"{{ print nom; }}\".</body></html>")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "<html><head><title>Mes plus belles vacances</title></head><body><h1>Mes plus belles vacances</h1><a href =\"Mon beau bateau.png\">Mon beau bateau.png</a><a href =\"Belle maman.png\">Belle maman.png</a><a href =\"Apero.png\">Apero.png</a><a href =\"Coucher de soleil.png\">Coucher de soleil.png</a><br />Il y a 4 photos dans l album \"Mes plus belles vacances\".</body></html>")
        tree = langage.parse("{{}}{{a := 'ok'; if 1 > 2 do a := 'aie aie aie'; endif; print a;}}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "ok")

if __name__ == '__main__':
    with open(".\src\lark_grammar.lark", "r") as grammar_file:
        grammar = grammar_file.read()
        langage = Lark(grammar, start='programme', parser="lalr")
        unittest.main()
import unittest
from dumbo import *

class DumboTester(unittest.TestCase):
    
    def testPrintSimple(self):
        # Print string.
        tree = langage.parse("{{ print 'sol'; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "sol")
        # Print variable string.
        tree = langage.parse("{{ a := 'sol'; print a; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "sol")
        # Print int.
        tree = langage.parse("{{ print 4; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "4")
        # Print variable int.
        tree = langage.parse("{{ a := 4; print a; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "4")
        # Print concaténation.
        tree = langage.parse("{{ print 'cou'.'cou'; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "coucou")
        # Print variable concaténation.
        tree = langage.parse("{{ a := 'cou'.'cou'; print a; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "coucou")
    
    def testDumboBlock(self):
        # 1 dumbo_block.
        tree = langage.parse("{{ print 1; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1")
        # 2 dumbo_block.
        tree = langage.parse("{{ print 1; }}{{ print 1; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "11")
        # Transfert de donnée.
        tree = langage.parse("{{ sol := 'yes'; }}{{ print sol; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # Vide.
        tree = langage.parse("{{}}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
    
    def testTxt(self):
        # 1 txt.
        tree = langage.parse("print 1;")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "print 1;")
    
    def testDumboBlocAndTxt(self):
        # dumbo_bloc et txt.
        tree = langage.parse("{{ print 1; }}2")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "12")
        tree = langage.parse("1{{ print 2; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "12")
        tree = langage.parse("1{{ print 2; }}3")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "123")
        tree = langage.parse("{{ print 1; }}2{{ print 3; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "123")
        # Espace
        tree = langage.parse("{{ print 1; }} 2")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1 2")
        tree = langage.parse("1 {{ print 2; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1 2")
        tree = langage.parse("{{ print 1; }}   2")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1   2")
        tree = langage.parse("1   {{ print 2; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1   2")

    def testAssignVar(self):
        # Bonne assignation.
        tree = langage.parse("{{ test := 'a'; test2 := 'b'; print test; print test2; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "ab")
        # Variable ecrasée.
        tree = langage.parse("{{ test := 'a'; test := 'b'; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "b")
        # Boolean true.
        tree = langage.parse("{{ test := true; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "true")
        # Boolean false.
        tree = langage.parse("{{ test := false; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "false")
        # string_list.
        tree = langage.parse("{{ test := ('1'); }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ test := ('1', 't', 'u'); }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # string_expression.
        # Concaténation.
        tree = langage.parse("{{ test := 'test'.'de'.'test'; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "testdetest")
        # String.
        tree = langage.parse("{{ test := 'test'; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "test")
        # Variable.
        tree = langage.parse("{{ test := 'test'; sol := test; print sol; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "test")
        tree = langage.parse("{{ test := 'test'; sol := test; res := sol; print res; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "test")
        # Variable entiere avec opération */.
        tree = langage.parse("{{ a := 2; test := a * a; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "4")
        tree = langage.parse("{{ test := 2; test := test * 3; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "6")
        tree = langage.parse("{{ test := 2; test := test * test; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "4")
        tree = langage.parse("{{ a := 2; test := a / a; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1")
        tree = langage.parse("{{ test := 6; test := test / 3; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "2")
        tree = langage.parse("{{ test := 2; test := test / test; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1")
        # INT avec opération */.
        tree = langage.parse("{{ test := 1 * 2; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "2")
        tree = langage.parse("{{ a := 2; test := 1 * a; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "2")
        tree = langage.parse("{{ test := 2 / 2; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1")
        tree = langage.parse("{{ a := 2; test := 2 / a; print test; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "1")

    def testAssignArith(self):
        pass

    def testIfRéussi(self):
        # If réussi avec boolean.
        tree = langage.parse("{{ if true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec variables.
        tree = langage.parse("{{ a := true; if a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec And et boolean.
        tree = langage.parse("{{ if true and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec And et boolean et variable.
        tree = langage.parse("{{ a := true; if a and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if true and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec Or et 2 boolean true.
        tree = langage.parse("{{ if true or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec Or et 2 boolean true avec variable.
        tree = langage.parse("{{ a := true; if a or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if true or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec Or et boolean true et false.
        tree = langage.parse("{{ if true or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec Or et boolean true et false avec variable.
        tree = langage.parse("{{ a := true; if a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if true or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := false; if true or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := false; b := true; if b or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := true; if b or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 2 And et boolean.
        tree = langage.parse("{{ if true and true and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 2 And et boolean avec variable.
        tree = langage.parse("{{ a := true; if a and true and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a and true and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := true; if a and b and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 2 Or et boolean true.
        tree = langage.parse("{{ if true or true or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 2 Or et 2 boolean variable.
        tree = langage.parse("{{ a := true; if a or true or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a or true or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a or true or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := true; if a or b or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := true; if a or b or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := true; if a or b or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := false; if a or b or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 2 Or et boolean true et false.
        tree = langage.parse("{{ if false or false or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 1 And, 1 Or et boolean true.
        tree = langage.parse("{{ if true and true or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 1 And, 1 Or et boolean true avec variable.
        tree = langage.parse("{{ a := true; if a and true or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a and true or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := true; if a and b or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := true; if a and b or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 1 And, 1 Or et boolean true et false.
        tree = langage.parse("{{ if true and true or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if true and false or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if true or false and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if true or false and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if false or true and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec 1 And, 1 Or et boolean true et false avec variable.
        tree = langage.parse("{{ a := true; if a and true or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a and a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if true and a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := false; if a and true or b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := false; if a and a or b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := false; if true and a or b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a and false or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if a and false or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; if true and false or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := false; if a and b or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := false; if a and b or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := true; b := false; if true and b or true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if true or false and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if true or false and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if false or true and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec <.
        tree = langage.parse("{{ if 1 < 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec < avec variable.
        tree = langage.parse("{{ a := 1; if a < 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec < et calcul.
        tree = langage.parse("{{ if 0 + 1 < 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 0 + 1 < 4 / 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 0 + 1 * 0 < 4 / 2 + 1 * 6 - 4 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec < et calcul et variable.
        tree = langage.parse("{{ a := 0 + 1; if a < 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1; if a < 4 / 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1 * 0; if a < 4 / 2 + 1 * 6 - 4 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1; if a + 1 < 2 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1; if a + 1 < 4 / 2 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1 * 0; if a * 1 + 1 < 4 / 2 + 1 * 6 - 4 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec >.
        tree = langage.parse("{{ if 2 > 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec > avec variable.
        tree = langage.parse("{{ a := 2; if a > 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec > et calcul.
        tree = langage.parse("{{ if 2 > 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 4 / 2 > 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 4 / 2 + 1 * 6 - 4 > 0 + 1 * 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec > et calcul et variable.
        tree = langage.parse("{{ a := 2; if a > 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 4 / 2; if a > 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 4 / 2 + 1 * 6 - 4; if a > 0 + 1 * 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 2; if a + 1 > 0 + 1 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 4 / 2; if 1 + a > 0 + 1 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 4 / 2 + 1 * 6 - 4; if 1 * a > 0 + 1 * 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec ==.
        tree = langage.parse("{{ if 1 == 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec == avec variable.
        tree = langage.parse("{{ a := 1; if a == 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec == avec calcul.
        tree = langage.parse("{{ if 0 + 1 == 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 0 + 1 == 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 0 + 1 * 0 + 0 == 1 * 0 + 1 - 1 * 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec == avec calcul avec variable.
        tree = langage.parse("{{ a := 0 + 1; if a == 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1; if a == 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1 * 0 + 0; if a == 1 * 0 + 1 - 1 * 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1; if a + 1 == 1 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1; if a + 1 == 0 + 1 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1 * 0 + 0; if a * 1 == 1 * 0 + 1 - 1 * 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec !=.
        tree = langage.parse("{{ if 0 != 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec != avec variable.
        tree = langage.parse("{{ a := 0; if a != 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec != avec calcul.
        tree = langage.parse("{{ if 0 + 0 != 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 0 + 1 != 0 + 3 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ if 0 + 1 * 0 + 0 + 1 != 1 * 0 + 1 - 1 * 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        # If réussi avec != avec calcul avec variable.
        tree = langage.parse("{{ a := 0 + 0; if a != 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1; if a != 0 + 3 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0 + 1 * 0 + 0 + 1; if a != 1 * 0 + 1 - 1 * 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0; if a + 0 != 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0; if a + 1 != 0 + 3 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
        tree = langage.parse("{{ a := 0; if a + 1 * 0 + 0 + 1 != 1 * 0 + 1 - 1 * 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "yes")
    
    def testIfRaté(self):
        # If raté avec boolean.
        tree = langage.parse("{{ if false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec boolean avec variable.
        tree = langage.parse("{{ a := false; if a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec And et boolean true et false.
        tree = langage.parse("{{ if true and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec And et boolean true et false avec variable.
        tree = langage.parse("{{ a := true; if a and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; if false and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if false and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if a and b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec Or et 2 boolean true et false.
        tree = langage.parse("{{ if false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec Or et 2 boolean true et false avec variable.
        tree = langage.parse("{{ a := false; if a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if false or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if b or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec Or et 2 boolean.
        tree = langage.parse("{{ if false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec Or et 2 boolean avec variable.
        tree = langage.parse("{{ a := false; if a or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if false or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if a or b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec 2 And et boolean true et false.
        tree = langage.parse("{{ if false and true and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if true and false and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if true and true and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if false and false and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec 2 And et boolean true et false avec variable.
        tree = langage.parse("{{ a := true; if false and a and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; if false and true and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; if false and a and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; b := true; if c and a and b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; c := false; if c and a and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; c := false; if c and true and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; c := false; if c and a and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; b := true; c := false; if c and a and b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; if a and false and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; if a and false and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; if true and false and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; b := true; if b and false and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; c := false; if a and c and true do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; c := false; if a and c and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; c := false; if true and c and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; c := false; b := true; if b and c and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; if a and true and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; if a and a and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; if true and a and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; b := true; if b and a and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; c := false; if a and true and c do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; c := false; if a and a and c do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; c := false; if true and a and c do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; b := true; c := false; if b and a and c do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a and false and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a and a and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a and a and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a and false and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if false and a and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if false and false and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if a and b and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if a and a and b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if a and b and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if b and a and false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if false and a and b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if false and b and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if b and false and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if b and b and a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; c := false; if a and b and c do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec 2 Or et boolean.
        tree = langage.parse("{{ if false or false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec 2 Or et boolean avec variable.
        tree = langage.parse("{{ a := false; if a or false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if false or a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if false or false or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a or false or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a or a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if false or a or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a or a or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if a or b or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; c:= false; if a or b or c do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec 1 And, 1 Or et boolean true.
        tree = langage.parse("{{ if true and false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if false and false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if false and true or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec 1 And, 1 Or et boolean true avec variable.
        tree = langage.parse("{{ a := true; if a and false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; b := false; if a and b or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; b := false; if a and false or b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; b := false; if a and b or b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := true; b := false; c := false; if a and b or c do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a and false or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a and false or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a and a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if a and a or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if false and a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if false and a or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; if false and false or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        
        tree = langage.parse("{{ a := false; b := false; if a and b or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if a and b or b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if a and false or b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if a and b or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if a and a or b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if b and a or false do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if b and a or b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if false and a or b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if b and a or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if false and b or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if b and false or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := false; b := false; if b and b or a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec <.
        tree = langage.parse("{{ if 2 < 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec < avec variable.
        tree = langage.parse("{{ a := 2; if a < 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec < et calcul.
        tree = langage.parse("{{ if 2 + 1 < 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if 0 + 1 < 2 / 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if 4 / 2 + 1 * 6 - 4 < 0 + 1 * 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec < et calcul avec variable.
        tree = langage.parse("{{ a := 2 + 1; if a < 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1; if a < 2 / 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 4 / 2 + 1 * 6 - 4; if a < 0 + 1 * 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 2 + 1; if a + 1 < 2 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1; if a + 1 < 2 / 2 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 4 / 2 + 1 * 6 - 4; if a * 1 < 0 + 1 * 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 2 + 1; b := 2; if a + 1 < b + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1; b := 2; if a + 1 < b / 2 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 4 / 2 + 1 * 6 - 4; b := 0 + 1 * 0; if a * 1 < 1 * b * 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec >.
        tree = langage.parse("{{ if 2 > 3 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec > avec variable.
        tree = langage.parse("{{ a := 2; if a > 3 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 2; b := 3; if a > b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 3;  if 2 > a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec > et calcul.
        tree = langage.parse("{{ if 2 > 0 + 1 * 2  do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if 4 / 2 - 2 > 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if 0 + 1 * 0 > 4 / 2 + 1 * 6 - 4 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec > et calcul avec variable.
        tree = langage.parse("{{ a := 2; if a > 0 + 1 * 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 4 / 2 - 2; if a > 0 + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1 * 0; if a > 4 / 2 + 1 * 6 - 4 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1 * 2; if 2 > a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1; if 4 / 2 - 2 > a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 4 / 2 + 1 * 6 - 4; if 0 + 1 * 0 > a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 2; b := 0 + 1 * 2; if a > b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 4 / 2 - 2; b := 0 + 1; if a > b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1 * 0; b := 4 / 2 + 1 * 6 - 4; if a > b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 2; b := 0 + 1 * 2; if a + 0 > b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 2; b := 0 + 1 * 2; if a + 0 > b + 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 2; b := 0 + 1 * 2; if a > b + 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 2; b := 0 + 1 * 2; if a + a > b + b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 4 / 2 - 2; b := 0 + 1; if a * 1 > b * 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1 * 0; b := 4 / 2 + 1 * 6 - 4; if a * a > b * b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec ==.
        tree = langage.parse("{{ if 2 == 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec == avec variable.
        tree = langage.parse("{{ a := 2; if a == 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ b := 1; if 2 == b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 2; b := 1; if a == b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec == avec calcul.
        tree = langage.parse("{{ if 0 + 1 == 3 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if 0 + 1 == 0 + 1 * 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ if 0 + 1 * 0 + 0 + 4 == 1 * 0 + 1 - 1 * 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec == avec calcul avec variable.
        tree = langage.parse("{{ a := 0 + 1 ; if a == 3 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1; if a == 0 + 1 * 2 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1 * 0 + 0 + 4; if a == 1 * 0 + 1 - 1 * 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 3 ; if 0 + 1 == a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1 * 2; if 0 + 1 == a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 1 * 0 + 1 - 1 * 1; if 0 + 1 * 0 + 0 + 4 == a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1 ; b := 3; if a == b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1; b := 0 + 1 * 2; if a + 0 == b + 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1 * 0 + 0 + 4; b := 1 * 0 + 1 * 1 * 1; if a * 1 == b * 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0 + 1 * 0 + 0 + 4; b := 1 * 0 + 1 * 1 * 1; if a * 1 + 0 == b * 1 + 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec !=.
        tree = langage.parse("{{ if 0 != 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        # If raté avec != avec variable.
        tree = langage.parse("{{ a := 0; if a != 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0; if 0 != a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0; if a != a do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0; b := 0; if a != b do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0; b := 0; if a + 1 != b + 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0; b := 0; if a * 1 != b * 1 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        tree = langage.parse("{{ a := 0; b := 0; if a + 1 * 0 != b + 1 * 0 do print 'yes'; endif; }}")
        scope = Scope()
        self.assertEqual(OurInterpreter(scope).display(tree), "")
        

if __name__ == '__main__':
    with open(".\src\lark_grammar.lark", "r") as grammar_file:
        grammar = grammar_file.read()
        langage = Lark(grammar, start='programme', parser="lalr")
        unittest.main()